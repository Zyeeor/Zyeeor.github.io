[{"id":"ca5952bfad3c73b70d9d4e09ee5807a8","title":"CS61A","content":"Week 1Lab00 doctest“ &gt;&gt;&gt; “ leads a doctest in python3, which provides a way to easily check if a proj runs correctly, can only be used in docstring ( a type of tips)\n&#39;&#39;&#39; #leads a docstring\n&gt;&gt;&gt;pythoninput\nresult\n&#39;&#39;&#39;\n\npython tools can automatically check if the pythoninput runs correctly with an expected result. Just as use test examples in terminal to check out. \nLec 21. Expressionprimitive expression\ncall expression\nEverthing can stand for a specific number or a function or anything like that is an expression\nplus? add? multiple\n&gt;&gt;&gt; from operator import add, mul\n&gt;&gt;&gt; add( a, b)\n\nOperator is the expresstion before (), in () are Operands divided by ,\nin python, expressions can be defined apart\na, b &#x3D; num_a, num_b\n\nthen a and b can have their own value of num_a  and num_b\n2. user defined functionsdefine a user preferred function with “ &#x3D; “\nmax\n&lt;built-in function &quot;max&quot;&gt;\nf &#x3D; max\ng &#x3D; f\n\nthen f and g can be used just the same as “max” function.\ndefine your own function\ndef f(x):\n    ...\n\nthen we got a function of f(x) that do some operation with x\nif in a function there’re some other variables, it would keep in sync when the variables change\na &#x3D; 10\ndef f():\n    return a*2\n\nf() &#x3D; 20\na &#x3D; 5\nf() &#x3D; 10\n\n3. environment diagramwhen we call user_defined functions:\nProcedure for calling&#x2F;applying user-defined functions (version 1):\n\nAdd a local frame, forming a new environment\nBInd the function’s formal parameters to its arguments in that frame\nExecute the body of the function in that new environment\n\n4. Looking up names in environmentevery expression is evaluated in the context of an environment.\nSo far, the current environment is either the global frame alone or a local frame, followed by the global frame.\nMOST important things of all dayAn environment is a sequence of frames.\nA name evaluates to the value bound to that name in the earliest frame of the current environment in which that name is found.\nWeek 2use “”” to lead a function’s explanation to get it accessable to user.\ndef func(x, y)\n&quot;&quot;&quot;\nTo get x*y\n&quot;&quot;&quot;\n\treturn x*y\n\nUse help(func) to see the explanation in interactive interface of python3.\nUse command line characters python3 -i a.py to run a.py in interactive terminal interface.\nUse command line characters python3 -m doctest a.py to run a.py with the samples from doctest.\nUse assert to check function’s assert range\ndef func(x, y)\n&quot;&quot;&quot;\nget x*y\n&quot;&quot;&quot;\n\tassert x &gt; 0, &#39;x must be postive&#39;\n\treturn x*y\n\nWhat assert leads should be the correct situation, means assert check if “x&gt;0” is true, if not it prints the context in ‘ ‘\nshort circuit in logical operator:a and b: if a is true, just return b; if a is false, just return a.\na or b: if a is true, just return a; if a is false, just return b.\ncalculation operators have higher running level than logic operator.\nFunctions inputpython function can  accept a name to simply input another function\ndef square(x):\n    return x * x\ndef cube(x):\n    return x * x * x\ndef cal(x, method):\n    return method(x);\n\n\n\nLambda expressionLambda expression is a efficient way to assign hidden functions.\n#lambda expression version of assignment of add\nadd &#x3D; lambda x, y: x + y\n&gt;&gt;&gt; add(1, 2)\n&gt;&gt;&gt; 3\n#normal defination of add\ndef add(x, y):\n    return x+y\n\nLambda expression can also have an empty parameter:\nc &#x3D; lambda: 88\n&gt;&gt;&gt; c\n&gt;&gt;&gt; &lt;lambda function&gt;\n&gt;&gt;&gt; c()\n&gt;&gt;&gt; 88\n\nFunction CurryingDivide a function’s input parameter into singles.\nfrom operator &#x3D; add\n&gt;&gt;&gt; add(1, 2)\n&gt;&gt;&gt; 3\n#lambda method to get currying function\ncurrAdd &#x3D; lambda x: lambda y: x + y\n&gt;&gt;&gt; currAdd(1, 2)\n&gt;&gt;&gt; Wrong\n&gt;&gt;&gt; currAdd(1)(2)\n&gt;&gt;&gt; 3\n#defination method to get currying function\ndef curr2(f):\n    def g(x):\n        def h(y):\n            return f(x,y)\n        return h\n    return g\ncurrAdd &#x3D; curr2(add)\n&gt;&gt;&gt; currAdd(1)(2)\n&gt;&gt;&gt; 3\n\nThe defination method of currying can be seemed as using g and h to get x and y singly passed into currFunc.\nArranging inputting parameters functionIn python we can use *type to get arranging inputting parameters:\ndef func(*args):\n    for i in args:\n        print(i)\n\n&gt;&gt;&gt; func(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;)\n&gt;&gt;&gt; a\n&gt;&gt;&gt; b\n&gt;&gt;&gt; c\n&gt;&gt;&gt; d\n\n\nClosure  functions: TO BE LEARNTWeek 2Keyword try can be used to test whether codes can run correctly in advance.\nfrom os import *\ntry:\n    import pandas\nexcept ImportError:\n    system(&quot;pip install pandas&quot;)\n\nThis snippet can check if you have installed pandas. If you had, importing succeeds, otherwise it will run the except context.\n","slug":"CS61A","date":"2022-11-11T03:18:10.000Z","categories_index":"","tags_index":"","author_index":"Rostee Yantaz"},{"id":"bc567916c4dc0d8169bd26d18e348d36","title":"test","content":"This is a test post.I’m planning to move my notes on yuque onto my own site.\n","slug":"test","date":"2022-09-29T14:48:39.000Z","categories_index":"","tags_index":"test","author_index":"Rostee Yantaz"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to my page!\nJUST A TEST \n\nnice to see ya!","slug":"hello-world","date":"2022-09-24T12:16:56.774Z","categories_index":"","tags_index":"","author_index":"Rostee Yantaz"}]