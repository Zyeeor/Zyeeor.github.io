{"title":"CS61A","uid":"ca5952bfad3c73b70d9d4e09ee5807a8","slug":"CS61A","date":"2022-11-11T03:18:10.000Z","updated":"2022-11-17T12:19:06.033Z","comments":true,"path":"api/articles/CS61A.json","keywords":null,"cover":[],"content":"<h2 id=\"Lab00-doctest\"><a href=\"#Lab00-doctest\" class=\"headerlink\" title=\"Lab00 doctest\"></a>Lab00 doctest</h2><p>“ &gt;&gt;&gt; “ leads a <strong>doctest</strong> in python3, which provides a way to easily check if a proj runs correctly, can only be used in <strong>docstring</strong> ( a type of tips)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;&#39;&#39; #leads a docstring\n&gt;&gt;&gt;pythoninput\nresult\n&#39;&#39;&#39;</code></pre>\n\n<p>python tools can automatically check if the pythoninput runs correctly with an expected result. Just as use test examples in terminal to check out. </p>\n<h1 id=\"Fundation\"><a href=\"#Fundation\" class=\"headerlink\" title=\"Fundation\"></a>Fundation</h1><h3 id=\"1-Expression\"><a href=\"#1-Expression\" class=\"headerlink\" title=\"1. Expression\"></a>1. Expression</h3><p>primitive expression</p>\n<p>call expression</p>\n<p>Everthing can stand for a specific number or a function or anything like that is an expression</p>\n<p>plus? add? multiple</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; from operator import add, mul\n&gt;&gt;&gt; add( a, b)</code></pre>\n\n<p>Operator is the expresstion before (), in () are Operands divided by ,</p>\n<p>in python, expressions can be defined apart</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a, b &#x3D; num_a, num_b</code></pre>\n\n<p>then a and b can have their own value of num_a  and num_b</p>\n<h3 id=\"2-user-defined-functions\"><a href=\"#2-user-defined-functions\" class=\"headerlink\" title=\"2. user defined functions\"></a>2. user defined functions</h3><p>define a user preferred function with “ &#x3D; “</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">max\n&lt;built-in function &quot;max&quot;&gt;\nf &#x3D; max\ng &#x3D; f</code></pre>\n\n<p>then f and g can be used just the same as “max” function.</p>\n<p>define your own function</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def f(x):\n    ...</code></pre>\n\n<p>then we got a function of f(x) that do some operation with x</p>\n<p>if in a function there’re some other variables, it would keep in sync when the variables change</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; 10\ndef f():\n    return a*2\n\nf() &#x3D; 20\na &#x3D; 5\nf() &#x3D; 10</code></pre>\n\n<h3 id=\"3-environment-diagram\"><a href=\"#3-environment-diagram\" class=\"headerlink\" title=\"3. environment diagram\"></a>3. environment diagram</h3><p>when we call user_defined functions:</p>\n<p>Procedure for calling&#x2F;applying user-defined functions (version 1):</p>\n<ol>\n<li><p>Add a local frame, forming a new environment</p>\n</li>\n<li><p>BInd the function’s formal parameters to its arguments in that frame</p>\n</li>\n<li><p>Execute the body of the function in that new environment!</p>\n<img src=\"/post/CS61A/01.png\" class=\"\" title=\"这是一张图片\"></li>\n</ol>\n<h3 id=\"4-Looking-up-names-in-environment\"><a href=\"#4-Looking-up-names-in-environment\" class=\"headerlink\" title=\"4. Looking up names in environment\"></a>4. Looking up names in environment</h3><p>every expression is evaluated in the context of an environment.</p>\n<p>So far, the current environment is either the global frame alone or a local frame, followed by the global frame.</p>\n<h4 id=\"MOST-important-things-of-all-day\"><a href=\"#MOST-important-things-of-all-day\" class=\"headerlink\" title=\"MOST important things of all day\"></a>MOST important things of all day</h4><p>An environment is a sequence of <strong>frames.</strong></p>\n<p>A name evaluates to the value bound to that name in the earliest frame of the current environment in which that name is found.</p>\n<h1 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h1><p>use “”” to lead a function’s explanation to get it accessable to user.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def func(x, y)\n&quot;&quot;&quot;\nTo get x*y\n&quot;&quot;&quot;\n\treturn x*y</code></pre>\n\n<p>Use help(func) to see the explanation in interactive interface of python3.</p>\n<p>Use command line characters <strong>python3 -i a.py</strong> to run a.py in interactive terminal interface.</p>\n<p>Use command line characters <strong>python3 -m doctest a.py</strong> to run a.py with the samples from doctest.</p>\n<p>Use assert to check function’s assert range</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def func(x, y)\n&quot;&quot;&quot;\nget x*y\n&quot;&quot;&quot;\n\tassert x &gt; 0, &#39;x must be postive&#39;\n\treturn x*y</code></pre>\n\n<p>What assert leads should be the correct situation, means assert check if “x&gt;0” is true, if not it prints the context in ‘ ‘</p>\n<h2 id=\"short-circuit-in-logical-operator\"><a href=\"#short-circuit-in-logical-operator\" class=\"headerlink\" title=\"short circuit in logical operator:\"></a>short circuit in logical operator:</h2><p>a and b: if a is true, just return b; if a is false, just return a.</p>\n<p>a or b: if a is true, just return a; if a is false, just return b.</p>\n<p>calculation operators have higher running level than logic operator.</p>\n<h2 id=\"Functions-input\"><a href=\"#Functions-input\" class=\"headerlink\" title=\"Functions input\"></a>Functions input</h2><p>python function can  accept a name to simply input another function</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def square(x):\n    return x * x\ndef cube(x):\n    return x * x * x\ndef cal(x, method):\n    return method(x);</code></pre>\n\n\n\n<h2 id=\"Lambda-expression\"><a href=\"#Lambda-expression\" class=\"headerlink\" title=\"Lambda expression\"></a>Lambda expression</h2><p>Lambda expression is a efficient way to assign hidden functions.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">#lambda expression version of assignment of add\nadd &#x3D; lambda x, y: x + y\n&gt;&gt;&gt; add(1, 2)\n&gt;&gt;&gt; 3\n#normal defination of add\ndef add(x, y):\n    return x+y</code></pre>\n\n<p>Lambda expression can also have an empty parameter:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">c &#x3D; lambda: 88\n&gt;&gt;&gt; c\n&gt;&gt;&gt; &lt;lambda function&gt;\n&gt;&gt;&gt; c()\n&gt;&gt;&gt; 88</code></pre>\n\n<h2 id=\"Function-Currying\"><a href=\"#Function-Currying\" class=\"headerlink\" title=\"Function Currying\"></a>Function Currying</h2><p>Divide a function’s input parameter into singles.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from operator &#x3D; add\n&gt;&gt;&gt; add(1, 2)\n&gt;&gt;&gt; 3\n#lambda method to get currying function\ncurrAdd &#x3D; lambda x: lambda y: x + y\n&gt;&gt;&gt; currAdd(1, 2)\n&gt;&gt;&gt; Wrong\n&gt;&gt;&gt; currAdd(1)(2)\n&gt;&gt;&gt; 3\n#defination method to get currying function\ndef curr2(f):\n    def g(x):\n        def h(y):\n            return f(x,y)\n        return h\n    return g\ncurrAdd &#x3D; curr2(add)\n&gt;&gt;&gt; currAdd(1)(2)\n&gt;&gt;&gt; 3</code></pre>\n\n<p>The defination method of currying can be seemed as using g and h to get x and y singly passed into currFunc.</p>\n<h2 id=\"Arranging-inputting-parameters-function\"><a href=\"#Arranging-inputting-parameters-function\" class=\"headerlink\" title=\"Arranging inputting parameters function\"></a>Arranging inputting parameters function</h2><p>In python we can use *type to get arranging inputting parameters:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def func(*args):\n    for i in args:\n        print(i)\n\n&gt;&gt;&gt; func(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;)\n&gt;&gt;&gt; a\n&gt;&gt;&gt; b\n&gt;&gt;&gt; c\n&gt;&gt;&gt; d</code></pre>\n\n<img src=\"/post/CS61A/02.png\" class=\"\" title=\"这是一张图片\">\n\n<h2 id=\"Closure-functions-TO-BE-COMPLETED\"><a href=\"#Closure-functions-TO-BE-COMPLETED\" class=\"headerlink\" title=\"Closure  functions: TO BE COMPLETED\"></a>Closure  functions: TO BE COMPLETED</h2><p>Keyword try can be used to test whether codes can run correctly in advance.</p>\n<h1 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h1><p>A function is called recursive if it calls itself in function body.</p>\n<p>The recursion is like a stack, which obeys the principle of “First in, Last out”. So when we are backtracking a recursive function’s level, it would turn out one by one.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def level(n):\n  print(n)\n  if n &gt;&#x3D; 1:\n  \treturn(n&#x2F;&#x2F;2)\n  else:\n    return n\n&#39;&#39;&#39;\n&gt;&gt;&gt;level(8)\n&gt;&gt;&gt;8\n&gt;&gt;&gt;4\n&gt;&gt;&gt;2\n&gt;&gt;&gt;1\n&gt;&gt;&gt;0.5\n&gt;&gt;&gt;0.5\t\t&#x2F;&#x2F;this is the final return value of level(8)\n&#39;&#39;&#39;</code></pre>\n\n<h2 id=\"Fragment-in-Recursion\"><a href=\"#Fragment-in-Recursion\" class=\"headerlink\" title=\"Fragment in Recursion\"></a>Fragment in Recursion</h2><p>Every time the function is called, a fragment is created and used to process the very level of recursion. After finnal breakpoint of recursion, the levels will turn out one by one, obeying “First in, Last out”.</p>\n<h2 id=\"Mutual-Recursion\"><a href=\"#Mutual-Recursion\" class=\"headerlink\" title=\"Mutual Recursion\"></a>Mutual Recursion</h2><p>Two or more functions calling one another in recursion is called mutual recursion.</p>\n<h2 id=\"Tree-Recursion\"><a href=\"#Tree-Recursion\" class=\"headerlink\" title=\"Tree Recursion\"></a>Tree Recursion</h2><p>If a function has called itself more than one time in different situations, it is called a tree recursion.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def count_partitions(n, m):\n        &quot;&quot;&quot;Count the ways to partition n using parts up to m.&quot;&quot;&quot;\n        if n &#x3D;&#x3D; 0:\n            return 1\n        elif n &lt; 0:\n            return 0\n        elif m &#x3D;&#x3D; 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m-1)</code></pre>\n\n<h1 id=\"Data-Abstraction\"><a href=\"#Data-Abstraction\" class=\"headerlink\" title=\"Data Abstraction\"></a>Data Abstraction</h1><h2 id=\"Numeric-Types\"><a href=\"#Numeric-Types\" class=\"headerlink\" title=\"Numeric Types\"></a>Numeric Types</h2><p>In python, there are some built-in data type class, we can use type( ) to check this.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt;type(2)\n&lt;class &#39;int&#39;&gt;\n&gt;&gt;&gt;type(1.5)\n&lt;class &#39;float&#39;&gt;\n&gt;&gt;&gt;type(1+1j)\n&lt;class &#39;complex&#39;&gt;</code></pre>\n\n<p>As is shown above, python has 3 basical classes of numbers:</p>\n<p>​\t‘int’ for intergers, ‘float’ for float point numbers, ‘complex’ for complex numbers.</p>\n<p>These number types are described as <em>class</em>, and all of the numbers are <em>instances</em> of a very class. And in the built-in classes, there’re some defined operations for the class. For example, <em>add</em> and <em>minus</em>.</p>\n<h2 id=\"Sequences\"><a href=\"#Sequences\" class=\"headerlink\" title=\"Sequences\"></a>Sequences</h2><p>A sequence is an ordered collection of values. The sequence is a powerful, fundamental abstraction in computer science. Sequences are not instances of a particular built-in type or abstract data representation, but instead a collection of behaviors that are shared among several different types of data. That is, there are many kinds of sequences, but they all share common behavior. In particular,</p>\n<p><strong>Length.</strong> A sequence has a finite length. An empty sequence has length 0.</p>\n<p><strong>Element selection.</strong> A sequence has an element corresponding to any non-negative integer index less than its length, starting at 0 for the first element.</p>\n<p>Python includes several native data types that are sequences, the most important of which is the <code>list</code>.</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>In list, use <code>Len()</code> to get its length. It’s subscripts begin with <code>0</code> and end with <code>Len(list)-1</code>.</p>\n<p>Two or more lists can be added head after tail. So a list can be multiplied with an integer, which means spread it by a specific time.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt;list &#x3D; [1, 2, 3, 4, 5]\n&gt;&gt;&gt;len(list)\n5\n&gt;&gt;&gt;list[3]\n4\n&gt;&gt;&gt;2*list\n[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n&gt;&gt;&gt;addition &#x3D; [6, 7, 8]\n&gt;&gt;&gt;list + addition\n[1, 2, 3, 4, 5, 6, 7, 8]</code></pre>\n\n<h3 id=\"Sequence-Iteration\"><a href=\"#Sequence-Iteration\" class=\"headerlink\" title=\"Sequence Iteration\"></a>Sequence Iteration</h3><p>For sequences, python has a <code>for</code> keyword to simply iterate them. A commonly used situation is shown as below</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt;list &#x3D; [1, 2, 3, 4, 5]\n&gt;&gt;&gt;for i in list:\n&gt;&gt;&gt;\tprint(i)\n1\n2\n3\n4\n5</code></pre>\n\n<p>A <code>for</code> statement consists of a single clause with the form:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for &lt;name&gt; in &lt;expression&gt;:\n    &lt;suite&gt;</code></pre>\n\n<p>A <code>for</code> statement is executed by the following procedure:</p>\n<ol>\n<li>Evaluate the header <code>&lt;expression&gt;</code>, which must yield an iterable value.</li>\n<li>For each element value in that iterable value, in order:<ol>\n<li>Bind <code>&lt;name&gt;</code> to that value in the current frame.</li>\n<li>Execute the <code>&lt;suite&gt;</code>.</li>\n</ol>\n</li>\n</ol>\n<p>Specifically, for-loop can unpack a sequence automatically, for example, we’re given a list of lists</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt;pairs &#x3D; [[1,2], [2,3], [3,4], [5,4]]</code></pre>\n\n<p>We can simply use for-loop to invoking the elements of the list in pairs:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt;for x, y in pairs:y\n&gt;&gt;&gt;\tif x &gt; y:\n&gt;&gt;&gt;\t\tprint(x, &#39;,&#39;, y)\n5, 4</code></pre>\n\n<p><strong>Ranges.</strong> A <code>range</code> is another built-in type of sequence in Python, which represents a range of integers. Ranges are created with <code>range</code>, which takes two integer arguments: the first number and one beyond the last number in the desired range.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt;list(range(5, 8))\n[5, 6, 7]</code></pre>\n\n<p>If the first number in range is omitted, it will be 0 by default.</p>\n<p>Sometimes, we shall use <code>_</code> as the name of iterator. It has a conventional meaning among programmers that indicates this value won’t be used in any future expression.</p>\n<h2 id=\"Sequence-Processing\"><a href=\"#Sequence-Processing\" class=\"headerlink\" title=\"Sequence Processing\"></a>Sequence Processing</h2><p><strong>List Comprehensions.</strong> Many sequence processing operations can be expressed by evaluating a fixed expression for each element in a sequence and collecting the resulting values in a result sequence. In Python, a list comprehension is an expression that performs such a computation.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; odds &#x3D; [1, 3, 5, 7, 9]\n&gt;&gt;&gt; [x+1 for x in odds]\n[2, 4, 6, 8, 10]</code></pre>\n\n<p>The general form of a list comprehension is:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">[&lt;map expression&gt; for &lt;name&gt; in &lt;sequence expression&gt; if &lt;filter expression&gt;]</code></pre>\n\n<p>To evaluate a list comprehension, Python evaluates the <code>&lt;sequence expression&gt;</code>, which must return an iterable value. Then, for each element in order, the element value is bound to <code>&lt;name&gt;</code>, the filter expression is evaluated, and if it yields a true value, the map expression is evaluated. The values of the map expression are collected into a list.</p>\n<h2 id=\"Sequence-Abstraction\"><a href=\"#Sequence-Abstraction\" class=\"headerlink\" title=\"Sequence Abstraction\"></a>Sequence Abstraction</h2><p><strong>Membership.</strong> A value can be tested for membership in a sequence. Python has two operators <code>in</code> and <code>not in</code> that evaluate to <code>True</code> or <code>False</code> depending on whether an element appears in a sequence.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; digits\n[1, 8, 2, 8]\n&gt;&gt;&gt; 2 in digits\nTrue\n&gt;&gt;&gt; 1828 not in digits\nTrue</code></pre>\n\n<p><strong>Slicing.</strong> Sequences contain smaller sequences within them. A <em>slice</em> of a sequence is any contiguous span of the original sequence, designated by a pair of integers. As with the <code>range</code> constructor, the first integer indicates the starting index of the slice and the second indicates one beyond the ending index.</p>\n<p>In Python, sequence slicing is expressed similarly to element selection, using square brackets. A colon separates the starting and ending indices. Any bound that is omitted is assumed to be an extreme value: 0 for the starting index, and the length of the sequence for the ending index.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; digits[0:2]\n[1, 8]\n&gt;&gt;&gt; digits[1:]\n[8, 2, 8]</code></pre>\n\n<p>Negative numbers are also allowed in slicing operation. They means counting from the tail of the list.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; digits[0:-1]\n[1, 8, 2]</code></pre>\n\n<h2 id=\"Strings\"><a href=\"#Strings\" class=\"headerlink\" title=\"Strings\"></a>Strings</h2><p>In python, strings have a constructor <code>str</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt;a &#x3D; 1\n&gt;&gt;&gt;type(str(a))\n&lt;class &#39;string&#39;&gt;</code></pre>\n\n<p>String can be treated and operated as a sequence of characters, which means we can use subscripts to invoking its components or us <code>len()</code> to get its length.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; city &#x3D; &#39;Berkeley&#39;\n&gt;&gt;&gt; len(city)\n8\n&gt;&gt;&gt; city[3]\n&#39;k&#39;</code></pre>\n\n<p>Strings can also be directly added together, presenting a result of head-after-tail of the addends. And the multipling is the same as sequences’.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; str1 &#x3D; &#39;ABC&#39;\n&gt;&gt;&gt; str2 &#x3D; &#39;DEF&#39;\n&gt;&gt;&gt; str1 + str2\n&#39;ABCDEF&#39;</code></pre>\n\n<h2 id=\"Tree\"><a href=\"#Tree\" class=\"headerlink\" title=\"Tree\"></a>Tree</h2><p>The <em>tree</em> is a fundamental data abstraction that imposes regularity on how hierarchical values are structured and manipulated.</p>\n<p>A tree has a root label and a sequence of branches. Each branch of a tree is a tree. A tree with no branches is called a leaf. Any tree contained within a tree is called a sub-tree of that tree (such as a branch of a branch). The root of each sub-tree of a tree is called a node in that tree.</p>\n<p>We can implement a tree in python in following format</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; def tree(root_label, branches&#x3D;[]):\n        for branch in branches:\n            assert is_tree(branch), &#39;branches must be trees&#39;\n        return [root_label] + list(branches)\n&gt;&gt;&gt; def label(tree):\n        return tree[0]\n&gt;&gt;&gt; def branches(tree):\n        return tree[1:]</code></pre>\n\n<p>A tree is well-formed only if it has a root label and all branches are also trees. The <code>is_tree</code> function is applied in the <code>tree</code> constructor to verify that all branches are well-formed.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; def is_tree(tree):\n        if type(tree) !&#x3D; list or len(tree) &lt; 1:\n            return False\n        for branch in branches(tree):\n            if not is_tree(branch):\n                return False\n        return True</code></pre>\n\n<p>The <code>is_leaf</code> function checks whether or not a tree has branches.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; def is_leaf(tree):\n        return not branches(tree)</code></pre>\n\n<h1 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS\"></a>TIPS</h1><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from os import *\ntry:\n    import pandas\nexcept ImportError:\n    system(&quot;pip install pandas&quot;)</code></pre>\n\n<p>This snippet can check if you have installed pandas. If you had, importing succeeds, otherwise it will run the except context.</p>\n","feature":true,"text":"Lab00 doctest“ &gt;&gt;&gt; “ leads a doctest in python3, which provides a way to easily check if a proj runs correctly, can only be used in...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lab00-doctest\"><span class=\"toc-text\">Lab00 doctest</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Fundation\"><span class=\"toc-text\">Fundation</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Expression\"><span class=\"toc-text\">1. Expression</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-user-defined-functions\"><span class=\"toc-text\">2. user defined functions</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-environment-diagram\"><span class=\"toc-text\">3. environment diagram</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Looking-up-names-in-environment\"><span class=\"toc-text\">4. Looking up names in environment</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#MOST-important-things-of-all-day\"><span class=\"toc-text\">MOST important things of all day</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Functions\"><span class=\"toc-text\">Functions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#short-circuit-in-logical-operator\"><span class=\"toc-text\">short circuit in logical operator:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Functions-input\"><span class=\"toc-text\">Functions input</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lambda-expression\"><span class=\"toc-text\">Lambda expression</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Function-Currying\"><span class=\"toc-text\">Function Currying</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Arranging-inputting-parameters-function\"><span class=\"toc-text\">Arranging inputting parameters function</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Closure-functions-TO-BE-COMPLETED\"><span class=\"toc-text\">Closure  functions: TO BE COMPLETED</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Recursion\"><span class=\"toc-text\">Recursion</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Fragment-in-Recursion\"><span class=\"toc-text\">Fragment in Recursion</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Mutual-Recursion\"><span class=\"toc-text\">Mutual Recursion</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Tree-Recursion\"><span class=\"toc-text\">Tree Recursion</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Data-Abstraction\"><span class=\"toc-text\">Data Abstraction</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Numeric-Types\"><span class=\"toc-text\">Numeric Types</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Sequences\"><span class=\"toc-text\">Sequences</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#List\"><span class=\"toc-text\">List</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Sequence-Iteration\"><span class=\"toc-text\">Sequence Iteration</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Sequence-Processing\"><span class=\"toc-text\">Sequence Processing</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Sequence-Abstraction\"><span class=\"toc-text\">Sequence Abstraction</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Strings\"><span class=\"toc-text\">Strings</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Tree\"><span class=\"toc-text\">Tree</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TIPS\"><span class=\"toc-text\">TIPS</span></a>","author":{"name":"Rostee Yantaz","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"test","uid":"bc567916c4dc0d8169bd26d18e348d36","slug":"test","date":"2022-09-29T14:48:39.000Z","updated":"2022-09-29T14:49:38.034Z","comments":true,"path":"api/articles/test.json","keywords":null,"cover":null,"text":"This is a test post.I’m planning to move my notes on yuque onto my own site. ","link":"","photos":[],"count_time":{"symbolsCount":77,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"test","slug":"test","count":1,"path":"api/tags/test.json"}],"author":{"name":"Rostee Yantaz","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}