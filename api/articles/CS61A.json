{"title":"CS61A","uid":"ca5952bfad3c73b70d9d4e09ee5807a8","slug":"CS61A","date":"2022-11-11T03:18:10.000Z","updated":"2022-11-11T04:09:19.743Z","comments":true,"path":"api/articles/CS61A.json","keywords":null,"cover":[],"content":"<h1 id=\"Week-1\"><a href=\"#Week-1\" class=\"headerlink\" title=\"Week 1\"></a>Week 1</h1><h2 id=\"Lab00-doctest\"><a href=\"#Lab00-doctest\" class=\"headerlink\" title=\"Lab00 doctest\"></a>Lab00 doctest</h2><p>“ &gt;&gt;&gt; “ leads a <strong>doctest</strong> in python3, which provides a way to easily check if a proj runs correctly, can only be used in <strong>docstring</strong> ( a type of tips)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;&#39;&#39; #leads a docstring\n&gt;&gt;&gt;pythoninput\nresult\n&#39;&#39;&#39;</code></pre>\n\n<p>python tools can automatically check if the pythoninput runs correctly with an expected result. Just as use test examples in terminal to check out. </p>\n<h2 id=\"Lec-2\"><a href=\"#Lec-2\" class=\"headerlink\" title=\"Lec 2\"></a>Lec 2</h2><h3 id=\"1-Expression\"><a href=\"#1-Expression\" class=\"headerlink\" title=\"1. Expression\"></a>1. Expression</h3><p>primitive expression</p>\n<p>call expression</p>\n<p>Everthing can stand for a specific number or a function or anything like that is an expression</p>\n<p>plus? add? multiple</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; from operator import add, mul\n&gt;&gt;&gt; add( a, b)</code></pre>\n\n<p>Operator is the expresstion before (), in () are Operands divided by ,</p>\n<p>in python, expressions can be defined apart</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a, b &#x3D; num_a, num_b</code></pre>\n\n<p>then a and b can have their own value of num_a  and num_b</p>\n<h3 id=\"2-user-defined-functions\"><a href=\"#2-user-defined-functions\" class=\"headerlink\" title=\"2. user defined functions\"></a>2. user defined functions</h3><p>define a user preferred function with “ &#x3D; “</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">max\n&lt;built-in function &quot;max&quot;&gt;\nf &#x3D; max\ng &#x3D; f</code></pre>\n\n<p>then f and g can be used just the same as “max” function.</p>\n<p>define your own function</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def f(x):\n    ...</code></pre>\n\n<p>then we got a function of f(x) that do some operation with x</p>\n<p>if in a function there’re some other variables, it would keep in sync when the variables change</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; 10\ndef f():\n    return a*2\n\nf() &#x3D; 20\na &#x3D; 5\nf() &#x3D; 10</code></pre>\n\n<h3 id=\"3-environment-diagram\"><a href=\"#3-environment-diagram\" class=\"headerlink\" title=\"3. environment diagram\"></a>3. environment diagram</h3><p>when we call user_defined functions:</p>\n<p>Procedure for calling&#x2F;applying user-defined functions (version 1):</p>\n<ol>\n<li><p>Add a local frame, forming a new environment</p>\n</li>\n<li><p>BInd the function’s formal parameters to its arguments in that frame</p>\n</li>\n<li><p>Execute the body of the function in that new environment!</p>\n<img src=\"/post/CS61A/01.png\" class=\"\" title=\"这是一张图片\"></li>\n</ol>\n<h3 id=\"4-Looking-up-names-in-environment\"><a href=\"#4-Looking-up-names-in-environment\" class=\"headerlink\" title=\"4. Looking up names in environment\"></a>4. Looking up names in environment</h3><p>every expression is evaluated in the context of an environment.</p>\n<p>So far, the current environment is either the global frame alone or a local frame, followed by the global frame.</p>\n<h4 id=\"MOST-important-things-of-all-day\"><a href=\"#MOST-important-things-of-all-day\" class=\"headerlink\" title=\"MOST important things of all day\"></a>MOST important things of all day</h4><p>An environment is a sequence of <strong>frames.</strong></p>\n<p>A name evaluates to the value bound to that name in the earliest frame of the current environment in which that name is found.</p>\n<h1 id=\"Week-2\"><a href=\"#Week-2\" class=\"headerlink\" title=\"Week 2\"></a>Week 2</h1><p>use “”” to lead a function’s explanation to get it accessable to user.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def func(x, y)\n&quot;&quot;&quot;\nTo get x*y\n&quot;&quot;&quot;\n\treturn x*y</code></pre>\n\n<p>Use help(func) to see the explanation in interactive interface of python3.</p>\n<p>Use command line characters <strong>python3 -i a.py</strong> to run a.py in interactive terminal interface.</p>\n<p>Use command line characters <strong>python3 -m doctest a.py</strong> to run a.py with the samples from doctest.</p>\n<p>Use assert to check function’s assert range</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def func(x, y)\n&quot;&quot;&quot;\nget x*y\n&quot;&quot;&quot;\n\tassert x &gt; 0, &#39;x must be postive&#39;\n\treturn x*y</code></pre>\n\n<p>What assert leads should be the correct situation, means assert check if “x&gt;0” is true, if not it prints the context in ‘ ‘</p>\n<h2 id=\"short-circuit-in-logical-operator\"><a href=\"#short-circuit-in-logical-operator\" class=\"headerlink\" title=\"short circuit in logical operator:\"></a>short circuit in logical operator:</h2><p>a and b: if a is true, just return b; if a is false, just return a.</p>\n<p>a or b: if a is true, just return a; if a is false, just return b.</p>\n<p>calculation operators have higher running level than logic operator.</p>\n<h2 id=\"Functions-input\"><a href=\"#Functions-input\" class=\"headerlink\" title=\"Functions input\"></a>Functions input</h2><p>python function can  accept a name to simply input another function</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def square(x):\n    return x * x\ndef cube(x):\n    return x * x * x\ndef cal(x, method):\n    return method(x);</code></pre>\n\n\n\n<h2 id=\"Lambda-expression\"><a href=\"#Lambda-expression\" class=\"headerlink\" title=\"Lambda expression\"></a>Lambda expression</h2><p>Lambda expression is a efficient way to assign hidden functions.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">#lambda expression version of assignment of add\nadd &#x3D; lambda x, y: x + y\n&gt;&gt;&gt; add(1, 2)\n&gt;&gt;&gt; 3\n#normal defination of add\ndef add(x, y):\n    return x+y</code></pre>\n\n<p>Lambda expression can also have an empty parameter:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">c &#x3D; lambda: 88\n&gt;&gt;&gt; c\n&gt;&gt;&gt; &lt;lambda function&gt;\n&gt;&gt;&gt; c()\n&gt;&gt;&gt; 88</code></pre>\n\n<h2 id=\"Function-Currying\"><a href=\"#Function-Currying\" class=\"headerlink\" title=\"Function Currying\"></a>Function Currying</h2><p>Divide a function’s input parameter into singles.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from operator &#x3D; add\n&gt;&gt;&gt; add(1, 2)\n&gt;&gt;&gt; 3\n#lambda method to get currying function\ncurrAdd &#x3D; lambda x: lambda y: x + y\n&gt;&gt;&gt; currAdd(1, 2)\n&gt;&gt;&gt; Wrong\n&gt;&gt;&gt; currAdd(1)(2)\n&gt;&gt;&gt; 3\n#defination method to get currying function\ndef curr2(f):\n    def g(x):\n        def h(y):\n            return f(x,y)\n        return h\n    return g\ncurrAdd &#x3D; curr2(add)\n&gt;&gt;&gt; currAdd(1)(2)\n&gt;&gt;&gt; 3</code></pre>\n\n<p>The defination method of currying can be seemed as using g and h to get x and y singly passed into currFunc.</p>\n<h2 id=\"Arranging-inputting-parameters-function\"><a href=\"#Arranging-inputting-parameters-function\" class=\"headerlink\" title=\"Arranging inputting parameters function\"></a>Arranging inputting parameters function</h2><p>In python we can use *type to get arranging inputting parameters:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def func(*args):\n    for i in args:\n        print(i)\n\n&gt;&gt;&gt; func(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;)\n&gt;&gt;&gt; a\n&gt;&gt;&gt; b\n&gt;&gt;&gt; c\n&gt;&gt;&gt; d</code></pre>\n\n<img src=\"/post/CS61A/02.png\" class=\"\" title=\"这是一张图片\">\n\n<h2 id=\"Closure-functions-TO-BE-LEARNT\"><a href=\"#Closure-functions-TO-BE-LEARNT\" class=\"headerlink\" title=\"Closure  functions: TO BE LEARNT\"></a>Closure  functions: TO BE LEARNT</h2><h1 id=\"Week-2-1\"><a href=\"#Week-2-1\" class=\"headerlink\" title=\"Week 2\"></a>Week 2</h1><p>Keyword try can be used to test whether codes can run correctly in advance.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from os import *\ntry:\n    import pandas\nexcept ImportError:\n    system(&quot;pip install pandas&quot;)</code></pre>\n\n<p>This snippet can check if you have installed pandas. If you had, importing succeeds, otherwise it will run the except context.</p>\n","feature":true,"text":"Week 1Lab00 doctest“ &gt;&gt;&gt; “ leads a doctest in python3, which provides a way to easily check if a proj runs correctly, can only be u...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Week-1\"><span class=\"toc-text\">Week 1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lab00-doctest\"><span class=\"toc-text\">Lab00 doctest</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lec-2\"><span class=\"toc-text\">Lec 2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Expression\"><span class=\"toc-text\">1. Expression</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-user-defined-functions\"><span class=\"toc-text\">2. user defined functions</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-environment-diagram\"><span class=\"toc-text\">3. environment diagram</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Looking-up-names-in-environment\"><span class=\"toc-text\">4. Looking up names in environment</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#MOST-important-things-of-all-day\"><span class=\"toc-text\">MOST important things of all day</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Week-2\"><span class=\"toc-text\">Week 2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#short-circuit-in-logical-operator\"><span class=\"toc-text\">short circuit in logical operator:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Functions-input\"><span class=\"toc-text\">Functions input</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lambda-expression\"><span class=\"toc-text\">Lambda expression</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Function-Currying\"><span class=\"toc-text\">Function Currying</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Arranging-inputting-parameters-function\"><span class=\"toc-text\">Arranging inputting parameters function</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Closure-functions-TO-BE-LEARNT\"><span class=\"toc-text\">Closure  functions: TO BE LEARNT</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Week-2-1\"><span class=\"toc-text\">Week 2</span></a></li></ol>","author":{"name":"Rostee Yantaz","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"test","uid":"bc567916c4dc0d8169bd26d18e348d36","slug":"test","date":"2022-09-29T14:48:39.000Z","updated":"2022-09-29T14:49:38.034Z","comments":true,"path":"api/articles/test.json","keywords":null,"cover":null,"text":"This is a test post.I’m planning to move my notes on yuque onto my own site. ","link":"","photos":[],"count_time":{"symbolsCount":77,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"test","slug":"test","count":1,"path":"api/tags/test.json"}],"author":{"name":"Rostee Yantaz","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}